a: type = u32;
Option: type -> type = x => [Some x, None {}];
unwrap: Option(u32) = 0;
add: {u32, u32} -> u32 = {};
inc: u32 -> u32 = x => add(x, 1);
// unwrap: Option('a) -> 'a = opt => match opt {
// 	Some(x) => x,
//	None(_) => unreachable
// };

// Vec2: type = {u32, u32};
// add: {Vec2, Vec2} -> Vec2 = {x, y} -> {add(x.0, y.0), add(x.1, y.1)};

// map :: {Option('a), 'a -> 'b} -> Option('b);
// map {Some(x), f} -> Some(f(x));
// map {None(_), _} -> None();
