Vec2: type = {u32, u32};
add_vec2: {Vec2, Vec2} -> Vec2 = {{a, b}, {c, d}} => {a.add(c), b.add(d)};

Option: type -> type = x => [Some x, None {}];
unwrap :: Option('a) -> 'a;
unwrap Some[x] => x;
unwrap None[_] => unreachable;

add: {u32, u32} -> u32 = {};
inc: u32 -> u32 = x => add(x, 1);

map :: {Option('a), 'a -> 'b} -> Option('b); 
map {Some[x], f} => Some[f(x)];
map {None[_], _} => None[{}];

main: {} -> {} = _ => {
  a: u32 = 1;
  b: u32 = 0;
  c: Vec2 = {a, b};
  d: Vec2 = {3, 2};
  e: Vec2 = c.add(d);
};
